
PointerFunction.cpp 에 대한 질문 1

void Local(int&);

int main(void)
{
    int var = 10;
    std::cout << "변수 var의 초깃값은 " << var << "입니다." << std::endl;
    Local(var); <--------------------------------------------------------이곳은 주소값을 넘겨야 하는 것 아닌가요? &를 사용해서 주소값을 넘겨야하는게 맞다고 보는데 왜 그냥 넣어도 되나요?
    std::cout << "Local() 함수 호출 후 변수 var의 값은 " << var << "입니다.";
    return 0;

}
void Local(int& num)
{
    num += 10;
}

질문 2 : void Local(int*)로 매개변수를 선언할 시, 넘기는 값은 [int* 포인터이름]이어야 하나요? 아니면 [int& 포인터이름]이어야 하나요? 그리고 그 이유는...뭐죠?

질문 3 : 질문 2의 궁금증을 해결하고자 실험하던 도중 포인터 주소를 넘기고 *로 받아오니 잘되더라구요. 근데 포인터 주소를 매개변수로 넘길때 포인터 주소도 다른 메모리에 복사하는 건가요?
        로컬 내랑 메인 함수에 있는 var의 주소가 다릅니다.
#include <iostream>
void Local(int*);
int main(void)
{
    int var = 10;
    //std::cout << "변수 var의 초깃값은 " << var << "입니다." << std::endl;
    std::cout << "메인 var의 값은 " << &var << "입니다.";
    Local(&var);
    //std::cout << "Local() 함수 호출 후 변수 var의 값은 " << var << "입니다.";
    return 0;
}
void Local(int* num)
{
    std::cout << "함수 내 num의 값은 " << &num << " : "<< *num << "입니다.";
}


DynamicAllocation.cpp 에 대한 질문 :
/*
		# NEW 연산자
		타입* 포인터이름 = new 타입;
		메모리가 부족할 경우 new는 Null 포인터를 반환.
		new는 free store이라 불리는 memory pool(메모리 공간)에 객체를 위한 메모리를 할당받음.
		(1) new를 통해 할당 받은 메모리는 따로 이름이 없으므로 해당 포인터로만 접근할 수 있음.
	*/
	int* ptr_int = new int;
	*ptr_int = 100;

	double* ptr_double = new double;
	*ptr_double = 3.14;

	std::cout << "int형 숫자 값 : " << *ptr_int << "이고,\n int형 숫자의 메모리 주소는 " << ptr_int << "입니다." << std::endl;
	std::cout << "double형 숫자 값 : " << *ptr_double << "이고,\n double형 숫자의 메모리 주소는 " << ptr_double << "입니다." << std::endl;//(2)

	delete ptr_int;
	delete ptr_double; 
}
질문 1) -> 변수를 만들고 그것을 포인터로 만들어서 받은 것이 아니기 때문에 포인터로만 접근이 가능하다는 것인가요?
질문 2) -> 메모리 주소를 출력할 때 16진수 0x01005354처럼 받고 싶은데 0082DC98이렇게 받음. 0x0082DC98 이렇게 못받나? ㅠㅠ


PointerArray.cpp에 대한 질문 :
	
    //배열의 포인터 연산
	int arr[3] = { 10, 20, 30 }; // 배열 선언
	std::cout << " 배열의 이름을 이용하여 배열 요소에 접근 : " << arr[0] << ", " << arr[1] << ", " << arr[2] << std::endl;
	std::cout << "배열의 이름으로 포인터 연산을 해 배열 요소에 접근 : " << *(arr + 0) << ", " << *(arr + 1) << ", " << *(arr + 2);
    
질문 1) -> 배열을 만들고 나서 왜 포인터로 대입하여 연산하여야 하는지? 그 이유와 필요에 대해서 알고 싶습니다.
질문 2) -> for 문으로 배열의 크기만큼 반복을 돌릴 때 sizeof로 나누는 방법이 아닌 range for문을 이용할 것을 권한다. 왜 length메소드가 없는 건가요?
맞는지에 대한질문 3) ->배열의 인덱스 0번 째의 주소부터 시작하니까,
	포인터로 주소를 알아낸뒤 *(arr+0)을 하면 시작주소 값에 있는 값을 얻어올 수 있고,
	*(arr+1)을 하면 int 자료형이니 시작 주소에서 4byte를 더한 주소에서 값을 꺼내올 수 있다.
    이해를 제대로 했나요?
    
    
EnumTypeExam.cpp에 대한 질문 :
열거체의 필요성에 대해서 모르겠습니다.
구조체를 const로 만들면 열거체 아닌가여?


StructType.cpp에 대한 질문 : 
//C++11부터는 구조체 변수를 초기화할 때에 대입 연산자(=)를 생략할 수 있으나, narrowing은 지원하지 않습니다. 
//narrowing cast란 다음 예제와 같이 초기화를 통해 발생하는 암시적인 데이터의 손실을 의미합니다.
//naarowing cast가 float형이 int형 되면 실수가 손실되는 것을 뜻하나요?


UnionExam.cpp에 대한 질문 :
역시 Union에 대한 필요를 모르겠습니다. 한 타입당 하나씩 저장이 가능하고, 제일 큰 타입으로 메모리를 할당한다고 하는데, 이게 메모리를 나눠쓸수 있는거였어요??



